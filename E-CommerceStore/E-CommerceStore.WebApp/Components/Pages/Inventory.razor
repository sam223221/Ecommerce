@page "/Inventory"
@rendermode InteractiveServer
@attribute [StreamRendering]
@attribute [Authorize(Roles = "Admin")]

<h1>Inventory</h1>
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@inject IModalService ModalService



<div class="row mb-3">
    <div class="col-md-8">
        <input type="text" @bind="searchQuery" placeholder="Search for products..." class="form-control" />
    </div>
    <div class="col-md-4">
        
        <button @onclick="SearchProducts" class="btn btn-primary" >Search</button>
        <button @onclick="OpenCreateDialog" class="btn btn-primary" >Create</button>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Product Name</th>
                    <th>Photo</th>
                    <th>Description</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in Products)
                {
                    <tr>
                        <td>@product.ProductName</td>
                        <td>
                            @if (!string.IsNullOrEmpty(product.ImageUrl))
                            {
                                <img src="@product.ImageUrl" alt="Product Image" style="width: 200px; height: 200px; object-fit: cover;" />
                            }
                        </td>
                        <td>@product.Description</td>
                        <td>@product.Price</td>
                        <td>@product.Quantity</td>
                        <td>
                            <span class="text-primary" style="cursor: pointer;" @onclick="() => OpenEditModal(product)">Edit</span> |
                            <span class="text-danger" style="cursor: pointer;" @onclick="() => OpenDeleteConfirmation(product)">Delete</span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


<ComponentAlertNotification 
    Message="@notificationMessage"
    IsSuccess="@isNotificationSuccess" />

@if (ModalCreateShow)
{
    <ComponentCreatePoUp 
        ItemCreated="@CloseCreateDialog">
    </ComponentCreatePoUp>
}
@if (ModalEditModalShow)
{
    <ComponentEditProduct 
        Product="@selectedProduct"
        OnClose="CloseEditModal"/>
}
@if (isDeleteModalOpen)
{
    <ComponentDeleteConfirmModal OnClose="ConfirmDelete" />
}

@code {
    private IEnumerable<Product> Products = new List<Product>();
    private string searchQuery = "";
    public bool ModalCreateShow { get; set; }
    private Product selectedProduct;
    private bool ModalEditModalShow = false;
    private String UpdateStatus = "";
    private string notificationMessage = "";
    private bool isNotificationSuccess = false;
    private bool isDeleteModalOpen = false;

    protected override async Task OnInitializedAsync()
    {
        Products = await ProductService.GetAllProductsExecuteAsync("");
    }

    private async void CloseCreateDialog(Product product)
    {
        if (product != null)
        {
            await ProductService.CreateProductAsync(product);
        }
        ModalCreateShow = false;
        StateHasChanged();
        NavigationManager.NavigateTo("/Inventory", true);
    }

    private void OpenCreateDialog()
    {
        ModalCreateShow = true;
        StateHasChanged();
    }

    private async Task SearchProducts()
    {
        Products = await ProductService.GetAllProductsExecuteAsync(searchQuery);
        StateHasChanged();
    }
    private void OpenEditModal(Product product)
    {
        selectedProduct = product;
        ModalEditModalShow = true;
    }

    private async Task CloseEditModal(Product product)
    {
        if (product != null)
        {
            UpdateStatus = await ProductService.UpdateProductAsync(product);

            // Display a notification based on the update status
            notificationMessage = UpdateStatus == "Success"
                ? "Product updated successfully!"
                : "Failed to update product.";
            isNotificationSuccess = UpdateStatus == "Success";

            ModalEditModalShow = false;
            StateHasChanged();
            await Task.Delay(5000); // Display for 3 seconds
            notificationMessage = ""; // Clear the message after the delay
            return;
        }


        ModalEditModalShow = false;
        StateHasChanged();
    }


    private void OpenDeleteConfirmation(Product product)
    {
        selectedProduct = product;
        isDeleteModalOpen = true;
    }

    private async Task ConfirmDelete(bool confirm)
    {
        isDeleteModalOpen = false;

        if (confirm)
        {
            // Call delete service or use case
            var deleteStatus = await ProductService.DeleteProductAsync(selectedProduct.ProductId);

            if (deleteStatus == "Success")
            {
                Products = Products.Where(p => p.ProductId != selectedProduct.ProductId).ToList();
                notificationMessage = "Product deleted successfully!";
                isNotificationSuccess = true;
            }
            else
            {
                notificationMessage = "Failed to delete product.";
                isNotificationSuccess = false;
            }

            StateHasChanged();
            await Task.Delay(5000); // Display for 3 seconds
            notificationMessage = ""; // Clear the message after the delay
        }
    }

}
