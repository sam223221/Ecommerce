@page "/Inventory"
@rendermode InteractiveServer

<h1>Inventory</h1>
@inject ICreateNewProduct CreateNewProduct
@inject NavigationManager NavigationManager
@inject IGetProductByNameUseCase GetProductNyNameUseCase
@inject IModalService ModalService


<div class="row mb-3">
    <div class="col-md-8">
        <input type="text" @bind="searchQuery" placeholder="Search for products..." class="form-control" />
    </div>
    <div class="col-md-4">
        
        <button @onclick="SearchProducts" class="btn btn-primary" >Search</button>
        <button @onclick="OpenDeleteDialog" class="btn btn-primary" >Create</button>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Product Name</th>
                    <th>Photo</th>
                    <th>Description</th>
                    <th>Price</th>
                    <th>Quantity</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in Products)
                {
                    <tr>
                        <td>@product.ProductName</td>
                        <td>
                            @if (!string.IsNullOrEmpty(product.ImageUrl))
                            {
                                <img src="@product.ImageUrl" alt="Product Image" style="width: 200px; height: 200px; object-fit: cover;" />
                            }
                        </td>
                        <td>@product.Description</td>
                        <td>@product.Price</td>
                        <td>@product.Quantity</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@if (ModalComponentShow)
{
    <ComponentCreatePoUp 
        OnClose="@OnDeleteDialogClose"
        ItemCreated="@CreateProduct">
    </ComponentCreatePoUp>
}

@code {
    private IEnumerable<Product> Products = new List<Product>();
    private string searchQuery = "";
    public bool ModalComponentShow { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Products = await GetProductNyNameUseCase.ExecuteAsync("");
    }
    private async Task OnDeleteDialogClose(bool accepted)
    {
        if (accepted)
        {
        }

        ModalComponentShow = false;
        StateHasChanged();
    }
    private async void CreateProduct(Product product)
    {
        await CreateNewProduct.CreateAsync(product);
        StateHasChanged();
        NavigationManager.NavigateTo("/Inventory", true);
    }

    private void OpenDeleteDialog()
    {
        ModalComponentShow = true;
        StateHasChanged();
    }

    private async Task SearchProducts()
    {
        Products = await GetProductNyNameUseCase.ExecuteAsync(searchQuery);
        StateHasChanged();
    }
}
