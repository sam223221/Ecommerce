@page "/Profile"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin,User")]
@inject IAccountsService AccountsService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="profile-container">
    <div class="card shadow-sm mx-auto p-4" style="max-width: 600px; background-color: #f9f9f9; border-radius: 10px;">
        <h3 class="text-center text-primary mb-4">User Profile</h3>

        <div class="profile-details">
            <div class="row mb-3">
                <div class="col-4"><strong>Username:</strong></div>
                <div class="col-8">@userProfile.AccountName</div>
            </div>
            <div class="row mb-3">
                <div class="col-4"><strong>Email:</strong></div>
                <div class="col-8">@userProfile.AccountEmail</div>
            </div>
            <div class="row mb-3">
                <div class="col-4"><strong>2FA Status:</strong></div>
                <div class="col-8">
                    <span class="badge @(userProfile.Status2FA ? "bg-success" : "bg-danger")">
                        @(userProfile.Status2FA ? "Enabled" : "Disabled")
                    </span>
                </div>
            </div>
        </div>

        <div class="text-center mt-4">
            <button class="btn btn-primary px-4" @onclick="OpenEditModal">Edit Profile</button>
        </div>

        @if (!string.IsNullOrEmpty(notificationMessage))
        {
            <div class="alert @(isNotificationSuccess ? "alert-success" : "alert-danger") mt-4 text-center">
                @notificationMessage
            </div>
        }
    </div>
</div>

@if (isEditModalOpen)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Profile</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@editableProfile" OnValidSubmit="SaveProfileChanges">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label>Username</label>
                            <InputText @bind-Value="editableProfile.AccountName" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label>Email Address</label>
                            <InputText @bind-Value="editableProfile.AccountEmail" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label>New Password</label>
                            <InputText @bind-Value="editableProfile.AccountPassword" class="form-control" type="password" />
                        </div>
                        <div class="form-check mb-3">
                            <label class="form-check-label">
                                <InputCheckbox @bind-Value="editableProfile.Status2FA" class="form-check-input" />
                                Enable Two-Factor Authentication
                            </label>
                        </div>

                        <div class="text-center">
                            <button type="submit" class="btn btn-success px-4">Save Changes</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private Account userProfile = new Account();
    private Account editableProfile = new Account();
    private bool isEditModalOpen = false;

    private string notificationMessage = "";
    private bool isNotificationSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var allAccounts = await AccountsService.GetAllAccountsAsync();
        userProfile = allAccounts.FirstOrDefault(a => a.AccountName == user.Identity.Name);

        if (userProfile == null)
        {
            notificationMessage = "Failed to load user profile.";
            isNotificationSuccess = false;
        }
    }

    private void OpenEditModal()
    {
        editableProfile = new Account
            {
                AccountName = userProfile.AccountName,
                AccountEmail = userProfile.AccountEmail,
                Status2FA = userProfile.Status2FA
            };
        isEditModalOpen = true;
    }

    private void CloseEditModal()
    {
        isEditModalOpen = false;
    }

    private async Task SaveProfileChanges()
    {
        userProfile.AccountName = editableProfile.AccountName;
        userProfile.AccountEmail = editableProfile.AccountEmail;
        userProfile.Status2FA = editableProfile.Status2FA;

        var result = await AccountsService.UpdateAccountAsync(userProfile);

        if (result == "Success")
        {
            notificationMessage = "Profile updated successfully!";
            isNotificationSuccess = true;
            isEditModalOpen = false;
        }
        else
        {
            notificationMessage = "Failed to update profile.";
            isNotificationSuccess = false;
        }
    }
}
