@page "/AccountManagement"
@rendermode InteractiveServer
@attribute [StreamRendering]
@attribute [Authorize(Roles = "Admin")]
@inject IAccountsService AccountsService
@inject NavigationManager NavigationManager
@inject IModalService ModalService

<div class="spacer" />

<div class="mockup-bg-container">
    <div style="display: flex; justify-content: center;">
        <div class="searchbarandbuttons">
            <input type="text" @bind="searchQuery" placeholder="Search for accounts..." class="searchbar" />
            <button @onclick="SearchAccounts" class="littlebutton">Search</button>
            <button @onclick="OpenCreateDialog" class="littlebutton">Create</button>
        </div>
    </div>

    <table class="styled-table">
        <thead>
            <tr>
                <th>Account Name</th>
                <th>Role</th>
                <th>Email Address</th>
                <th>2FA Status</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var account in Accounts)
            {
                <tr>
                    <td>@account.AccountName</td>
                    <td>@account.Role</td>
                    <td>@(string.IsNullOrWhiteSpace(account.AccountEmail) ? "N/A" : account.AccountEmail)</td>
                    <td>@(account.Status2FA ? "Enabled" : "Disabled")</td>
                    <td>
                        <span class="text-primary" style="cursor: pointer;" @onclick="() => OpenEditModal(account)">Edit</span> |
                        <span class="text-danger" style="cursor: pointer;" @onclick="() => OpenDeleteConfirmation(account)">Delete</span> |
                        <button class="btn btn-sm btn-secondary" @onclick="() => ToggleTwoFactor(account)">
                            @(account.Status2FA ? "Disable 2FA" : "Enable 2FA")
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
 </div>

<ComponentAlertNotification 
    Message="@notificationMessage"
    IsSuccess="@isNotificationSuccess" />

@if (ModalCreateShow)
{
    <ComponentCreateAccountModal 
        AccountCreated="@CloseCreateDialog">
    </ComponentCreateAccountModal>
}
@if (ModalEditModalShow)
{
    <ComponentEditAccountModal 
        Account="@selectedAccount"
        OnClose="CloseEditModal" />
}
@if (isDeleteModalOpen)
{
    <ComponentDeleteConfirmModal OnClose="ConfirmDelete" />
}

@code {
    private IEnumerable<Account> Accounts = new List<Account>();
    private string searchQuery = "";
    public bool ModalCreateShow { get; set; }
    private Account selectedAccount;
    private bool ModalEditModalShow = false;
    private string notificationMessage = "";
    private bool isNotificationSuccess = false;
    private bool isDeleteModalOpen = false;

    protected override async Task OnInitializedAsync()
    {
        Accounts = await AccountsService.GetAllAccountsAsync();

    }

    private async void CloseCreateDialog(Account account)
    {
        if (account != null)
        {
            await AccountsService.CreateAccountAsync(account);
        }
        ModalCreateShow = false;
        StateHasChanged();
        NavigationManager.NavigateTo("/AccountManagement", true);
    }

    private void OpenCreateDialog()
    {
        ModalCreateShow = true;
        StateHasChanged();
    }

    private async Task SearchAccounts()
    {
        Accounts = await AccountsService.GetAllAccountsAsync(searchQuery);
        StateHasChanged();
    }
    
    private void OpenEditModal(Account account)
    {
        selectedAccount = account;
        ModalEditModalShow = true;
    }

    private async Task CloseEditModal(Account updatedAccount)
    {
        if (updatedAccount != null)
        {
            var updateStatus = await AccountsService.UpdateAccountAsync(updatedAccount);

            if (updateStatus == "Success")
            {
                var accountToUpdate = Accounts.FirstOrDefault(a => a.AccountId == updatedAccount.AccountId);
                if (accountToUpdate != null)
                {
                    accountToUpdate.AccountName = updatedAccount.AccountName;
                    accountToUpdate.AccountPassword = updatedAccount.AccountPassword;
                    accountToUpdate.Role = updatedAccount.Role;
                    accountToUpdate.AccountEmail = updatedAccount.AccountEmail;
                }

                notificationMessage = "Account updated successfully!";
                isNotificationSuccess = true;
            }
            else
            {
                notificationMessage = "Failed to update account.";
                isNotificationSuccess = false;
            }

            ModalEditModalShow = false;
            StateHasChanged();
            await Task.Delay(5000);
            notificationMessage = "";
        }
        else
        {
            ModalEditModalShow = false;
            StateHasChanged();
        }
    }

    private async Task ToggleTwoFactor(Account account)
    {
        if (string.IsNullOrWhiteSpace(account.AccountEmail))
        {
            notificationMessage = $"Cannot enable 2FA for {account.AccountName}. Email address is missing.";
            isNotificationSuccess = false;
        }
        else
        {
            account.Status2FA = !account.Status2FA; 
            await AccountsService.UpdateAccountAsync(account);

            notificationMessage = $"2FA has been {(account.Status2FA ? "enabled" : "disabled")} for {account.AccountName}.";
            isNotificationSuccess = true;
        }

        StateHasChanged();
        await Task.Delay(2000);
        notificationMessage = "";
    }

    private void OpenDeleteConfirmation(Account account)
    {
        selectedAccount = account;
        isDeleteModalOpen = true;
    }

    private async Task ConfirmDelete(bool confirm)
    {
        isDeleteModalOpen = false;

        if (confirm)
        {
            var deleteStatus = await AccountsService.DeleteAccountAsync(selectedAccount);

            if (deleteStatus == "Success")
            {
                Accounts = Accounts.Where(a => a.AccountId != selectedAccount.AccountId).ToList();
                notificationMessage = "Account deleted successfully!";
                isNotificationSuccess = true;
            }
            else
            {
                notificationMessage = "Failed to delete account.";
                isNotificationSuccess = false;
            }

            StateHasChanged();
            await Task.Delay(5000);
            notificationMessage = "";
        }
    }
}
