@page "/ShoppingCart"
@using System.Security.Claims
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin,User")]
<link rel="stylesheet" href="ShoppingCartStyles.css">

@inject IAccountsService AccountsService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="main-container">
    @if (isLoading)
    {
        <p>Loading shopping cart...</p>
    }
    else if (userAccount?.ShopingCart != null && userAccount.ShopingCart.Count > 0)
    {
        <div class="product-cart">

            @foreach (var item in userAccount.ShopingCart)
            {
                <div class="product-container" style="margin-top: 10px">
                    <img src="@item.Product.ImageUrl" class="image-style" />
                    <div class="text-container">
                        <p class="product-name">@item.Product.ProductName</p>
                        <p class="product-size">@item.Product.Description</p>
                        <div class="item-management-container">
                            <img src="/images/trash.png" class="trash-image" />
                            <p class="remove-text" @onclick="() => RemoveItem(item)">Remove</p>
                        </div>
                    </div>
                    <div class="sum-container">
                        <div class="quantity-container">
                            <p>Quantity</p>
                            <input type="number" class="quantity-input" min="1" @bind="item.Quantity" max="@item.Product.Quantity" @oninput="() => UpdateTotalCost(item)" />
                        </div>
                        <div class="price-container">
                            <p class="price-promotion">$119</p>
                            <p class="price">@item.Product.Price</p>
                        </div>
                        
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p class="promotion-text">You have 0 items in the shopping cart.</p>
    }
</div>

<!-- Check Out -->
<div class="summary-container">
    <p class="total-amount-text">The total amount of </p>
    <div class="cost-container">
        <p class="price-type-label">Temporary amount</p>
        <p class="price-label">@cost kr</p>
    </div>
    <div class="cost-container">
        <p class="price-type-label">Shipping</p>
        <p class="price-label">Gratis</p>
    </div>
    <div class="line-summary" />
    <div class="total-amount">
        <p class="total-sum-text">The total amount of (including VAT)</p>
        <p class="total-sum-text" style="font-size: 19px;">@cost kr</p>
    </div>
    <button class="checkout-button">
        <p class="checkout-text">GO TO CHECKOUT</p>
    </button>
</div>



@code {
    private Account? userAccount;
    private bool isLoading = true;
    private double cost = 0;
    private CancellationTokenSource _debounceTokenSource;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var UserId = int.Parse(user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value ?? "0");
            var allAccounts = await AccountsService.GetAllAccountsAsync();
            userAccount = allAccounts.FirstOrDefault(prop => prop.AccountId == UserId);

            if (userAccount == null)
            {
                Console.WriteLine("User account not found.");
            }
        }
        else
        {
            Console.WriteLine("User is not authenticated.");
        }

        isLoading = false;
        UpdateTotalCost();
    }

    private async Task RemoveItem(shopingCart item)
    {
        if (userAccount?.ShopingCart != null)
        {
            userAccount.ShopingCart.Remove(item);
            await AccountsService.UpdateAccountAsync(userAccount);
            await Task.Delay(100);
            UpdateTotalCost();
        }
    }

    private async Task UpdateTotalCost(shopingCart? quantityChange = null)
    {
        if (quantityChange != null)
        {
            _debounceTokenSource?.Cancel();
            _debounceTokenSource = new CancellationTokenSource();
            var token = _debounceTokenSource.Token;
            
            // Wait for a short period (300 ms) to see if there are input events
            try
            {
                await Task.Delay(300, token);
            }
            catch (TaskCanceledException)
            {
                // The delay was canceled, meaning another input occurred
                return;
            }
       
            userAccount.ShopingCart.Find(p => p.Equals(quantityChange)).Quantity = quantityChange.Quantity;
            await AccountsService.UpdateAccountAsync(userAccount);
        }

        cost = userAccount?.ShopingCart?.Sum(item => item.Product.Price * item.Quantity) ?? 0;
        StateHasChanged();
    }
}
