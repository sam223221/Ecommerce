@page "/TwoFactorAuthentication/"
@attribute [Authorize(Roles= "2FA")]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAccountsService AccountsService
@inject NavigationManager NavigationManager
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using global::Components.Pages.AccountPages.ViewModel

<div class="register-container">
    <div class="centered-container">
        <div class="twofactor">
            <h3>Two-Factor Authentication</h3>

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <p class="text-danger">@ErrorMessage</p>
            }

            <EditForm Model="@model" OnValidSubmit="@ValidateCode" FormName="TwoFactor">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div>
                    <label>Enter the code sent to your email:</label>
                    <InputNumber @bind-Value="@(model.TwoFactorNum)" class="form-control" />
                </div>
                <button type="submit" class="btn btn-primary">Submit</button>
            </EditForm>
        </div>
    </div>
</div>


@code
{
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    TwoFactorForm model { get; set; } = new TwoFactorForm();

    private string TwoFactorCode { get; set; }
    private string ErrorMessage { get; set; }
    private Account? userAccount;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var UserId = int.Parse(user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value ?? "0");
            var allAccounts = await AccountsService.GetAllAccountsAsync();
            userAccount = allAccounts.FirstOrDefault(prop => prop.AccountId == UserId);

            if (userAccount == null)
            {
                Console.WriteLine("User account not found.");
            }
        }
        else
        {
            Console.WriteLine("User is not authenticated.");
        }
    }
    private async Task ValidateCode()
    {

        if (model.TwoFactorNum == int.Parse(userAccount.TwoFactorID))
		{
            await HttpContext.SignOutAsync();
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.NameIdentifier, userAccount.AccountId.ToString()),
                new Claim(ClaimTypes.Name, userAccount.AccountName),
                new Claim(ClaimTypes.Role, userAccount.Role)
            };

            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);

            await HttpContext.SignInAsync(principal);
            NavigationManager.NavigateTo("/", forceLoad: true);

		}
		else
		{
            await HttpContext.SignOutAsync();
            NavigationManager.NavigateTo("/Login", forceLoad: true);
		}
    }
}
