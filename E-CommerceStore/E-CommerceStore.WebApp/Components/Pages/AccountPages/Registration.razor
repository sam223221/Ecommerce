@page "/RegistrationPage"

@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using E_CommerceStore.WebApp.Components.Pages.AccountPages.ViewModel
@inject IAccountsService AccountsService
@inject NavigationManager NavigationManager

<div class="login-container">
    <div class="login-card">
        <h2>Register New Account</h2>
        <EditForm Model="newAccount" OnValidSubmit="HandleValidSubmit" FormName="registarton">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label>Account Name</label>
                <InputText @bind-Value="newAccount.AccountName" class="form-control" />
                <ValidationMessage For="@(() => newAccount.AccountName)" />
            </div>

            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="newAccount.AccountPassword" type="password" class="form-control" />
                <ValidationMessage For="@(() => newAccount.AccountPassword)" />
            </div>

            <button type="submit" class="btn btn-primary">Register</button>
        </EditForm>
    </div>
</div>

@code {
    private CreateUserViewModel newAccount = new CreateUserViewModel();

    private async Task HandleValidSubmit()
    {
        // Convert view model to the Account entity
        var account = new Account
            {
                AccountName = newAccount.AccountName,
                AccountPassword = newAccount.AccountPassword,
                Role = newAccount.Role
            };

        await AccountsService.CreateAccountAsync(account);
        NavigationManager.NavigateTo("/AccountManagement", true);
    }
}