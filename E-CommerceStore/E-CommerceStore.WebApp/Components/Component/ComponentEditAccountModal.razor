@using ECommerce.CoreEntityBusiness

<div class="modal fade show" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Account</h5>
                <button type="button" class="close" @onclick="Close">&times;</button>
            </div>
            <div class="modal-body">
                <EditForm Model="editAccount" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <!-- Account Name -->
                    <div class="form-group">
                        <label>Account Name</label>
                        <InputText @bind-Value="editAccount.AccountName" class="form-control" />
                        <ValidationMessage For="@(() => editAccount.AccountName)" />
                    </div>

                    <!-- Password -->
                    <div class="form-group">
                        <label>Password</label>
                        <InputText @bind-Value="editAccount.AccountPassword" type="password" class="form-control" />
                        <ValidationMessage For="@(() => editAccount.AccountPassword)" />
                    </div>

                    <!-- Role -->
                    <div class="form-group">
                        <label>Role</label>
                        <InputText @bind-Value="editAccount.Role" class="form-control" />
                        <ValidationMessage For="@(() => editAccount.Role)" />
                    </div>

                    <!-- Email Address -->
                    <div class="form-group">
                        <label>Email Address</label>
                        <InputText @bind-Value="editAccount.AccountEmail" class="form-control" placeholder="Enter email address" />
                        <ValidationMessage For="@(() => editAccount.AccountEmail)" />
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="Close">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Account Account { get; set; }

    [Parameter]
    public EventCallback<Account> OnClose { get; set; }

    private Account editAccount;

    protected override void OnInitialized()
    {
        // Create a copy of the Account parameter to work with locally
        editAccount = new Account
            {
                AccountId = Account.AccountId,
                AccountName = Account.AccountName,
                AccountPassword = Account.AccountPassword,
                Role = Account.Role,
                AccountEmail = Account.AccountEmail // Include email in the copy
            };
    }

    private async Task HandleValidSubmit()
    {
        // Send the updated account data back to the parent component
        await OnClose.InvokeAsync(editAccount);
    }

    private Task Close()
    {
        // Send a null account back to indicate cancellation
        return OnClose.InvokeAsync(null);
    }
}
