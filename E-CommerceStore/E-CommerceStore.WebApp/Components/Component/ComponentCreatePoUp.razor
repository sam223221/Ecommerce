@rendermode InteractiveServer

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Create a Product</h4>
                <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
            </div>
            <div class="modal-body">
                <EditForm Model="@Model" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <!-- Image Upload -->
                    <div class="text-center mb-3">
                        @if (!string.IsNullOrEmpty(Model.UploadedImageUrl))
                        {
                            <img src="@Model.UploadedImageUrl" alt="Product Image" class="img-thumbnail" style="max-width: 100%; max-height: 150px;" />
                        }
                        else
                        {
                            <div class="image-placeholder" style="width: 100%; height: 150px; border: 1px dashed #ccc; display: flex; align-items: center; justify-content: center;">
                                <span class="icon-camera">📷</span>
                            </div>
                        }
                        <InputFile OnChange="HandleFileSelected" style="display: block; margin: 10px auto;" />
                        @if (!string.IsNullOrEmpty(fileErrorMessage))
                        {
                            <p class="text-danger">@fileErrorMessage</p>
                        }
                    </div>

                    <!-- Product Fields -->
                    <div class="form-group">
                        <label>Product Name</label>
                        <InputText @bind-Value="Model.ProductName" class="form-control" placeholder="Enter Product Name" />
                        <ValidationMessage For="@(() => Model.ProductName)" />
                    </div>

                    <div class="form-group">
                        <label>Description</label>
                        <InputTextArea @bind-Value="Model.ProductDescription" class="form-control" placeholder="Enter Product Description" />
                        <ValidationMessage For="@(() => Model.ProductDescription)" />
                    </div>

                    <div class="form-group">
                        <label>Quantity</label>
                        <InputNumber @bind-Value="Model.ProductQuantity" class="form-control" placeholder="Enter Quantity" />
                        <ValidationMessage For="@(() => Model.ProductQuantity)" />
                    </div>

                    <div class="form-group">
                        <label>Price</label>
                        <InputNumber @bind-Value="Model.ProductPrice" class="form-control" placeholder="Enter Price" />
                        <ValidationMessage For="@(() => Model.ProductPrice)" />
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="@ModalCancel">Cancel</button>
                        <button type="submit" class="btn btn-primary" disabled="@string.IsNullOrWhiteSpace(Model.ProductName) && string.IsNullOrWhiteSpace(Model.ProductDescription)">Create</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter] public EventCallback<Product> ItemCreated { get; set; }

    private CreatePopUpViewModel Model { get; set; } = new CreatePopUpViewModel();
    private string fileErrorMessage = "";

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;

        // Check if only one file is selected
        if (e.FileCount > 1)
        {
            fileErrorMessage = "Please upload only one file.";
            Model.UploadedImageUrl = string.Empty;
            return;
        }

        // Validate file type (only JPG and PNG)
        if (file.ContentType != "image/jpeg" && file.ContentType != "image/png")
        {
            fileErrorMessage = "Only JPG and PNG files are allowed.";
            Model.UploadedImageUrl = string.Empty;
            return;
        }

        fileErrorMessage = "";

        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        Model.UploadedImageUrl = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
    }

    private Task ModalCancel()
    {
        return ItemCreated.InvokeAsync(null);
    }

    private async Task HandleValidSubmit()
    {
        // Create the product item
        var newItem = new Product
            {
                ProductName = Model.ProductName,
                Description = Model.ProductDescription,
                Quantity = Model.ProductQuantity,
                Price = Model.ProductPrice,
                ImageUrl = Model.UploadedImageUrl
            };

        await ItemCreated.InvokeAsync(newItem);
    }
}
