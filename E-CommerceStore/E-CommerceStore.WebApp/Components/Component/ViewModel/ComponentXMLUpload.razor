@rendermode InteractiveServer
@inject IProductService ProductService

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Upload an XML</h4>
                <button type="button" class="close" @onclick="@ModalExit">&times;</button>
            </div>
            <div class="modal-body">
                <EditForm Model="@Model">
                    <div>
                        <b>
                            Here you can upload your products in bulk using XML.<br />
                            The file has to follow certain rules:
                        </b><br /><br />
                        • Extension: .xml<br />
                        • Encoding: UTF-8 <br />
                        • Product Name: from 3 to 45 characters<br/>
                        • Product Description: from 0 to 100 characters<br />
                        • Product Price: from 1 to 10000 value<br />
                        • Product Quantity: from 0 to 10000 value<br /><br />
                        <b>And the obligatory structure:</b><br /><br>
                        &lt;Products&gt;<br />
                        &lt;Product&gt;<br />
                        &lt;ProductName&gt;Sample Product&lt;/ProductName&gt;<br />
                        &lt;Description&gt;Sample description&lt;/Description&gt;<br />
                        &lt;Quantity&gt;Number&lt;/Quantity&gt;<br />
                        &lt;Price&gt;Number&lt;/Price&gt;<br />
                        &lt;ImageUrl&gt;http://example.com/sample.jpg&lt;/ImageUrl&gt;<br />
                        &lt;/Product&gt;<br />
                        &lt;/Products&gt;<br /><br />
                        <p />

                        <div class="form-group">
                            <b><label for="fileUpload">Choose your XML file:</label></b><br />
                            <InputFile id="fileUpload" OnChange="HandleFileChange" accept=".xml" />
                        </div>

                        @if (!string.IsNullOrEmpty(fileErrorMessage))
                        {
                            <p class="text-primary">@((MarkupString)fileErrorMessage)</p>
                        }

                        @if (ParsedProducts?.Count > 0)
                        {
                            <div>
                                <p class="text-success">Successfully parsed @ParsedProducts.Count products!</p>
                                <ul>
                                    @foreach (var product in ParsedProducts)
                                    {
                                        <li>@product.ProductName - @($"{product.Quantity}x")</li>
                                    }
                                </ul>
                                <p class="text-success">You can now upload them.</p>
                                <button type="button" class="btn btn-primary" @onclick="UploadParsedProducts">Upload Products</button>
                            </div>
                        }
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="@ModalExit">Exit</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
        [Parameter] public EventCallback<Product> XMLUploaded { get; set; }

    private CreatePopUpViewModel Model { get; set; } = new CreatePopUpViewModel();
    private string fileErrorMessage = "";
    private List<Product> ParsedProducts { get; set; } = new List<Product>();

    @inject IProductService ProductService

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;

        const long maxAllowedSize = 5 * 1024 * 1024;

        if (file.Size > maxAllowedSize)
        {
            fileErrorMessage = "File size exceeds the maximum allowed limit of 5 MB.";
            return;
        }

        if (file.ContentType != "application/xml" && !file.Name.EndsWith(".xml"))
        {
            fileErrorMessage = "Please upload a valid XML file.";
            return;
        }

        fileErrorMessage = "";

        using var stream = file.OpenReadStream(maxAllowedSize);

        var reader = new StreamReader(stream);
        var xmlContent = await reader.ReadToEndAsync();

        var result = ParseXmlToProducts(xmlContent);

        if (result.HasError)
        {
            fileErrorMessage = result.ErrorMessage;
            ParsedProducts.Clear();
            return;
        }

        ParsedProducts = result.Products;
    }

    private async Task UploadParsedProducts()
    {
        if (ParsedProducts.Count == 0)
        {
            fileErrorMessage = "No products to upload.";
            return;
        }

        var uploadResult = await ProductService.BulkCreateProductsAsync(ParsedProducts);

        if (uploadResult.StartsWith("Success"))
        {
            fileErrorMessage = "Products uploaded successfully!";
            ParsedProducts.Clear();
        }
        else
        {
            fileErrorMessage = uploadResult;
        }
    }

    private (List<Product> Products, bool HasError, string ErrorMessage) ParseXmlToProducts(string xmlContent)
    {
        var products = new List<Product>();
        var errorMessages = new List<string>();

        try
        {
            var xDoc = XDocument.Parse(xmlContent);
            foreach (var productElement in xDoc.Descendants("Product"))
            {
                var product = new Product
                    {
                        ProductName = productElement.Element("ProductName")?.Value,
                        Description = productElement.Element("Description")?.Value,
                        Quantity = int.TryParse(productElement.Element("Quantity")?.Value, out var quantity) ? quantity : 0,
                        Price = double.TryParse(productElement.Element("Price")?.Value, out var price) ? price : 0.00,
                        ImageUrl = productElement.Element("ImageUrl")?.Value
                    };

                var productErrors = new List<string>();

                if (string.IsNullOrEmpty(product.ProductName) || product.ProductName.Length < 3 || product.ProductName.Length > 45)
                    productErrors.Add("Wrong Product Name.");
                if (product.Description != null && product.Description.Length > 100)
                    productErrors.Add("Wrong Product Description.");
                if (string.IsNullOrEmpty(product.ImageUrl))
                    productErrors.Add("Wrong Image URL Adress.");
                if (product.Price <= 1 || product.Price > 10000)
                    productErrors.Add("Price must be a number from to 10 000.");
                if (product.Quantity <= 0 || product.Quantity > 10000)
                    productErrors.Add("Quantity must be a number from 1 to 10 000.");

                if (productErrors.Any())
                {
                    errorMessages.Add($"Product '{product.ProductName}' has the following errors: <br/>• {string.Join("<br/> • ", productErrors)}<br/><br/>");
                    continue; 
                }

                products.Add(product);
            }

            if (errorMessages.Any())
            {
                return (products, true, string.Join("\n", errorMessages));
        }

            return (products, false, string.Empty);
        }
        catch
        {
            return (products, true, "Upload failed. Check file structure.");
        }
    }


    private Task ModalExit() => XMLUploaded.InvokeAsync(null);
}
